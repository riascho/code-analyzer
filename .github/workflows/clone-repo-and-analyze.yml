name: Run Code Analysis on Repository from Issue

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs:
  run-code-analysis-on-repository:
    runs-on: ubuntu-latest
    # Only run if issue has the 'clone-repo' label or contains specific keywords
    if: contains(github.event.issue.labels.*.name, 'clone-repo') || contains(github.event.issue.body, 'Repository:')

    steps:
      - name: Checkout host repository
        uses: actions/checkout@v4

      - name: Parse repository URL from issue
        id: parse-repo
        run: |
          echo "üîç Parsing issue body for repository URL..."

          # Extract repository URL from issue body
          # Look for patterns like "Repository: https://github.com/..." or just the URL
          REPO_URL=$(echo "${{ github.event.issue.body }}" | grep -oE 'https://github\.com/[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+' | head -1)

          if [ -z "$REPO_URL" ]; then
            echo "‚ùå No valid GitHub repository URL found in issue body"
            echo "Issue body content:"
            echo "${{ github.event.issue.body }}"
            exit 1
          fi

          # Extract owner and repo name for later use
          REPO_PATH=$(echo "$REPO_URL" | sed 's|https://github\.com/||')
          OWNER=$(echo "$REPO_PATH" | cut -d'/' -f1)
          REPO_NAME=$(echo "$REPO_PATH" | cut -d'/' -f2)

          echo "‚úÖ Found repository URL: $REPO_URL"
          echo "üìÇ Owner: $OWNER"
          echo "üìÅ Repository: $REPO_NAME"

          # Export variables for next steps
          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
          echo "repo_path=$REPO_PATH" >> $GITHUB_OUTPUT
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Clone target repository
        id: clone-repo
        run: |
          echo "üîÑ Cloning repository: ${{ steps.parse-repo.outputs.repo_url }}"

          # Clone the repository
          if git clone "${{ steps.parse-repo.outputs.repo_url }}" ./cloned-repo; then
            echo "‚úÖ Repository cloned successfully"
          else
            echo "‚ùå Failed to clone repository"
            exit 1
          fi

          # Change to cloned repo directory and get some info
          cd ./cloned-repo

          echo "üìä Repository Information:"
          echo "- Repository: ${{ steps.parse-repo.outputs.repo_path }}"
          echo "- Branch: $(git branch --show-current)"
          echo "- Last commit: $(git log -1 --format='%h - %s (%an, %ar)')"
          echo "- Total files: $(find . -type f | wc -l)"
          echo "- Directory size: $(du -sh . | cut -f1)"

          # List some basic file types
          echo ""
          echo "üìÅ File breakdown:"
          for ext in py js ts java go rs cpp c php rb; do
            count=$(find . -name "*.$ext" | wc -l)
            if [ $count -gt 0 ]; then
              echo "- .$ext files: $count"
            fi
          done

      - name: Comment success on issue
        uses: actions/github-script@v7
        with:
          script: |
            const repoInfo = {
              url: '${{ steps.parse-repo.outputs.repo_url }}',
              owner: '${{ steps.parse-repo.outputs.owner }}',
              name: '${{ steps.parse-repo.outputs.repo_name }}'
            };

            const commentBody = `## ‚úÖ Repository Cloned Successfully

            **Repository:** ${repoInfo.url}
            **Cloned at:** ${new Date().toISOString()}
            **Workflow Run:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            The repository has been successfully cloned and is ready for analysis. Check the workflow logs for detailed repository information.`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Add success label
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['repo-cloned']
            });

      - name: Handle clone failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Failed to Clone Repository**
              
              There was an error cloning the repository. Common issues:
              - Repository URL is invalid or malformed
              - Repository is private and not accessible
              - Repository doesn't exist
              - Network connectivity issues
              
              Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.
              
              **Expected format:** Include a GitHub repository URL in your issue body, like:
              \`\`\`
              Repository: https://github.com/owner/repository-name
              \`\`\``
            });

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['clone-failed']
            });

      - name: List cloned repository contents (for debugging)
        if: always()
        run: |
          if [ -d "./cloned-repo" ]; then
            echo "üìã Repository structure (top level):"
            ls -la ./cloned-repo/ || echo "Could not list directory contents"
          else
            echo "‚ùå No cloned repository directory found"
          fi

        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Failed to Clone Repository**
              
              There was an error cloning the repository. Common issues:
              - Repository URL is invalid or malformed
              - Repository is private and not accessible
              - Repository doesn't exist
              - Network connectivity issues
              
              Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.
              
              **Expected format:** Include a GitHub repository URL in your issue body, like:
              \`\`\`
              Repository: https://github.com/owner/repository-name
              \`\`\``
            });
            
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['clone-failed']
            });

# use claude.md for the prompt/ instructions? 
      - name: Parse analysis prompt from issue
        id: parse-prompt
        run: |
          echo "üîç Parsing analysis prompt from issue..."
          
          # Extract custom prompt from issue body (between ```prompt and ```)
          PROMPT=$(echo "${{ github.event.issue.body }}" | sed -n '/```prompt/,/```/p' | sed '1d;$d' | tr -d '\r')
          
          # Use default prompt if none provided
          if [ -z "$PROMPT" ]; then
            PROMPT="Analyze this repository for code quality, security vulnerabilities, and architectural improvements. Focus on identifying potential issues, best practices violations, and provide specific recommendations for improvement."
          fi
          
          echo "üìù Analysis prompt:"
          echo "$PROMPT"
          
          # Save prompt to output (handle multiline)
          {
            echo "prompt<<EOF"
            echo "$PROMPT"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Run Claude Code Analysis
        id: claude-analysis
        uses: anthropics/claude-code-action@beta
        with:
          api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          working-directory: ./cloned-repo
          prompt: ${{ steps.parse-prompt.outputs.prompt }}

      - name: Post analysis results to issue
        uses: actions/github-script@v7
        with:
          script: |
            const repoInfo = {
              url: '${{ steps.parse-repo.outputs.repo_url }}',
              owner: '${{ steps.parse-repo.outputs.owner }}',
              name: '${{ steps.parse-repo.outputs.repo_name }}'
            };
            
            const analysisResults = `${{ steps.claude-analysis.outputs.response }}`;
            
            const commentBody = `## ü§ñ Claude Code Analysis Results
            
            **Repository:** ${repoInfo.url}
            **Analysis Date:** ${new Date().toISOString()}
            **Workflow Run:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            **Prompt Used:**
            \`\`\`
            ${{ steps.parse-prompt.outputs.prompt }}
            \`\`\`
            
            ---
            
            ### üìä Analysis Results:
            
            ${analysisResults}
            
            ---
            
            *Analysis completed using Claude Code Action*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Handle Claude Code analysis failure
        if: failure() && steps.claude-analysis.conclusion == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Claude Code Analysis Failed**
              
              The repository was cloned successfully, but the Claude Code analysis failed.
              
              **Common issues:**
              - Missing or invalid ANTHROPIC_API_KEY secret
              - Repository too large for analysis
              - Analysis prompt caused an error
              - API rate limits exceeded
              
              **To fix:**
              1. Ensure you've added your Anthropic API key to repository secrets as \`ANTHROPIC_API_KEY\`
              2. Check if the repository is too large (try with a smaller repo first)
              3. Verify your API key has sufficient credits
              4. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error information
              
              **Get your API key:** Visit https://console.anthropic.com/ to create an API key if you don't have one.`
            });
            
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['claude-analysis-failed']
            });

      - name: Add analysis completed label
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['claude-analyzed']
            });