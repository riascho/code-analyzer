name: Run Code Analysis on Repository from Issue

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write
  contents: write
  id-token: write

jobs:
  setup-and-analyze:
    runs-on: ubuntu-latest

    if: |
      (github.event_name == 'issues' && 
      github.event.issue.user.login == 'riascho' &&
       contains(github.event.issue.body, 'Repository') && 
       contains(github.event.issue.body, '@claude'))

    steps:
      - name: Checkout host repository
        uses: actions/checkout@v4

      - name: Parse repository URL from issue
        id: parse-repo
        run: |
          echo "üîç Parsing issue body for repository URL..."

          # Extract repository URL from issue body
          # Look for patterns like "Repository: https://github.com/..." or just the URL
          REPO_URL=$(echo "${{ github.event.issue.body }}" | grep -oE 'https://github\.com/[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+' | head -1)

          if [ -z "$REPO_URL" ]; then
            echo "‚ùå No valid GitHub repository URL found in issue body"
            echo "Issue body content:"
            echo "${{ github.event.issue.body }}"
            exit 1
          fi

          # Extract owner and repo name for later use
          REPO_PATH=$(echo "$REPO_URL" | sed 's|https://github\.com/||')
          OWNER=$(echo "$REPO_PATH" | cut -d'/' -f1)
          REPO_NAME=$(echo "$REPO_PATH" | cut -d'/' -f2)

          echo "‚úÖ Found repository URL: $REPO_URL"
          echo "üìÇ Owner: $OWNER"
          echo "üìÅ Repository: $REPO_NAME"

          # Export variables for next steps
          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
          echo "repo_path=$REPO_PATH" >> $GITHUB_OUTPUT
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Clone target repository
        id: clone-target-repo
        run: |
          echo "üîÑ Cloning repository: ${{ steps.parse-repo.outputs.repo_url }}"

          # Clone the repository
          if git clone "${{ steps.parse-repo.outputs.repo_url }}" ./cloned-repo; then
            echo "‚úÖ Repository cloned successfully"
          else
            echo "‚ùå Failed to clone repository"
            exit 1
          fi

          # Change to cloned repo directory and get some info
          cd ./cloned-repo

          echo "üìä Repository Information:"
          echo "- Repository: ${{ steps.parse-repo.outputs.repo_path }}"
          echo "- Branch: $(git branch --show-current)"
          echo "- Last commit: $(git log -1 --format='%h - %s (%an, %ar)')"
          echo "- Total files: $(find . -type f | wc -l)"
          echo "- Directory size: $(du -sh . | cut -f1)"

          # List some basic file types
          echo ""
          echo "üìÅ File breakdown:"
          for ext in py js ts java go rs cpp c php rb; do
            count=$(find . -name "*.$ext" | wc -l)
            if [ $count -gt 0 ]; then
              echo "- .$ext files: $count"
            fi
          done

      - name: Clone node starter repository
        id: clone-node-starter-repo
        run: |
          echo "üîÑ Cloning Node Starter repository"

          # Clone the repository
          if git clone https://github.com/n8n-io/n8n-nodes-starter.git ./n8n-nodes-starter; then
            echo "‚úÖ Repository cloned successfully"
          else
            echo "‚ùå Failed to clone repository"
            exit 1
          fi

      - name: Handle clone failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Failed to Clone Repository**
              
              There was an error cloning the repository. Common issues:
              - Repository URL is invalid or malformed
              - Repository is private and not accessible
              - Repository doesn't exist
              - Network connectivity issues
              
              Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.
              
              **Expected format:** Include a GitHub repository URL in your issue body, like:
              \`\`\`
              Repository: https://github.com/owner/repository-name
              \`\`\``
            });

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['clone-failed']
            });

      - name: List cloned repository contents (for debugging)
        if: always()
        run: |
          if [ -d "./cloned-repo" ]; then
            echo "üìã Repository structure (top level):"
            ls -la ./cloned-repo/ || echo "Could not list directory contents"
          else
            echo "‚ùå No cloned repository directory found"
          fi

      - name: Setup workspace for Claude Code analysis
        run: |
          echo "üìÅ Setting up workspace for Claude Code analysis..."

          # Create a clean workspace structure for Claude to analyze both repositories
          mkdir -p ./workspace

          # Copy target repository (preserve directory structure)
          if [ -d "./cloned-repo" ]; then
            echo "üìÇ Copying target repository to workspace/target-repo/"
            cp -r ./cloned-repo ./workspace/target-repo
            rm -rf ./workspace/target-repo/.git
          else
            echo "‚ùå Target repository not found at ./cloned-repo"
            exit 1
          fi

          # Copy n8n starter repository (preserve directory structure)  
          if [ -d "./n8n-nodes-starter" ]; then
            echo "üìÇ Copying n8n-nodes-starter to workspace/n8n-nodes-starter/"
            cp -r ./n8n-nodes-starter ./workspace/n8n-nodes-starter
            rm -rf ./workspace/n8n-nodes-starter/.git
          else
            echo "‚ùå n8n-nodes-starter repository not found"
            exit 1
          fi

          # Move into workspace directory for Claude Code execution
          cd ./workspace

          echo "‚úÖ Workspace setup complete"
          echo "üìã Workspace structure:"
          ls -la
          echo ""
          echo "üìÇ Target repository contents:"
          ls -la target-repo/
          echo ""
          echo "üìÇ n8n-nodes-starter contents:"
          ls -la n8n-nodes-starter/

      - name: Run Claude Code Analysis
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          # github_token: ${{ secrets.GITHUB_TOKEN }} // GitHub token for Claude to operate with. Only include this if you're connecting a custom GitHub app of your own!
          trigger_phrase: "@claude"
          allowed_tools: "bash"
          working_directory: "./workspace"

      - name: Add success label and context
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const repoUrl = '${{ steps.parse-repo.outputs.repo_url }}';

            // Add success label
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['code-analyzed']
            });

            // Add context comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ **Analysis Complete**
              
              **Repository:** ${repoUrl}
              **Completed:** ${new Date().toISOString()}
              **Workflow Run:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              The repository analysis has been completed. Check the comments above for the detailed analysis results.`
            });

      - name: Handle analysis failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Repository Analysis Failed**
              
              There was an error analyzing the repository. Common issues:
              - Repository URL is invalid or malformed  
              - Repository is private and not accessible
              - Repository is too large for analysis
              - Missing or invalid ANTHROPIC_API_KEY secret
              - Analysis request format incorrect
              
              **Expected format:**
              \`\`\`
              Repository: https://github.com/owner/repository-name
              
              @claude Please analyze this repository for code quality issues.
              \`\`\`
              
              Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error information.`
            });

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['analysis-failed']
            });

  cleanup:
    runs-on: ubuntu-latest
    needs: setup-and-analyze
    if: always() && github.event_name == 'issues'
    steps:
      - name: Cleanup workspace
        run: |
          echo "üßπ Analysis completed - workspace will be automatically cleaned up"

      - name: Close issue if analysis succeeded
        if: contains(needs.setup-and-analyze.result, 'success')
        uses: actions/github-script@v7
        with:
          script: |
            // Check if the issue has the 'code-analyzed' label
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const hasCodeAnalyzedLabel = labels.some(label => label.name === 'code-analyzed');

            if (hasCodeAnalyzedLabel) {
              await github.rest.issues.update({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed'
              });
              
              console.log('Issue closed automatically after successful analysis');
            } else {
              console.log('Issue not closed - code-analyzed label not found');
            }
