name: Run Code Analysis on Repository from Issue

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write
  contents: write
  id-token: write

jobs:
  #   restrict-author:
  #     runs-on: ubuntu-latest
  #     outputs:
  #       should_continue: ${{ steps.set-output.outputs.continue }}
  #     steps:
  #       - name: Check issue author
  #         id: set-output
  #         uses: actions/github-script@v7
  #         with:
  #           # github-token: ${{ secrets.GITHUB_TOKEN }}
  #           script: |
  #             const allowedUsers = ['riascho'];
  #             const author = context.payload.issue.user.login;

  #             const isAllowed = allowedUsers.includes(author);

  #             if (!isAllowed) {
  #               await github.issues.createComment({
  #                 owner: context.repo.owner,
  #                 repo: context.repo.repo,
  #                 issue_number: context.issue.number,
  #                 body: `Sorry @${author}, you are not authorized to raise issues in this repository.`
  #               });

  #               await github.issues.update({
  #                 owner: context.repo.owner,
  #                 repo: context.repo.repo,
  #                 issue_number: context.issue.number,
  #                 state: 'closed'
  #               });
  #             }

  #             return isAllowed ? 'true' : 'false';

  setup-and-analyze:
    runs-on: ubuntu-latest
    # Only runs if issue contains Repository: URL and @claude mention

    # needs.author-check.outputs.should_continue == 'true' &&
    if: |
      (github.event_name == 'issues' && 
       contains(github.event.issue.body, 'Repository:') && 
       contains(github.event.issue.body, '@claude'))

    steps:
      - name: Checkout host repository
        uses: actions/checkout@v4

      - name: Parse repository URL from issue
        id: parse-repo
        run: |
          echo "üîç Parsing issue body for repository URL..."

          # Extract repository URL from issue body
          # Look for patterns like "Repository: https://github.com/..." or just the URL
          REPO_URL=$(echo "${{ github.event.issue.body }}" | grep -oE 'https://github\.com/[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+' | head -1)

          if [ -z "$REPO_URL" ]; then
            echo "‚ùå No valid GitHub repository URL found in issue body"
            echo "Issue body content:"
            echo "${{ github.event.issue.body }}"
            exit 1
          fi

          # Extract owner and repo name for later use
          REPO_PATH=$(echo "$REPO_URL" | sed 's|https://github\.com/||')
          OWNER=$(echo "$REPO_PATH" | cut -d'/' -f1)
          REPO_NAME=$(echo "$REPO_PATH" | cut -d'/' -f2)

          echo "‚úÖ Found repository URL: $REPO_URL"
          echo "üìÇ Owner: $OWNER"
          echo "üìÅ Repository: $REPO_NAME"

          # Export variables for next steps
          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
          echo "repo_path=$REPO_PATH" >> $GITHUB_OUTPUT
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Clone target repository
        id: clone-repo
        run: |
          echo "üîÑ Cloning repository: ${{ steps.parse-repo.outputs.repo_url }}"

          # Clone the repository
          if git clone "${{ steps.parse-repo.outputs.repo_url }}" ./cloned-repo; then
            echo "‚úÖ Repository cloned successfully"
          else
            echo "‚ùå Failed to clone repository"
            exit 1
          fi

          # Change to cloned repo directory and get some info
          cd ./cloned-repo

          echo "üìä Repository Information:"
          echo "- Repository: ${{ steps.parse-repo.outputs.repo_path }}"
          echo "- Branch: $(git branch --show-current)"
          echo "- Last commit: $(git log -1 --format='%h - %s (%an, %ar)')"
          echo "- Total files: $(find . -type f | wc -l)"
          echo "- Directory size: $(du -sh . | cut -f1)"

          # List some basic file types
          echo ""
          echo "üìÅ File breakdown:"
          for ext in py js ts java go rs cpp c php rb; do
            count=$(find . -name "*.$ext" | wc -l)
            if [ $count -gt 0 ]; then
              echo "- .$ext files: $count"
            fi
          done

      - name: Comment success on issue
        uses: actions/github-script@v7
        with:
          script: |
            const repoInfo = {
              url: '${{ steps.parse-repo.outputs.repo_url }}',
              owner: '${{ steps.parse-repo.outputs.owner }}',
              name: '${{ steps.parse-repo.outputs.repo_name }}'
            };

            const commentBody = `## ‚úÖ Repository Cloned Successfully

            **Repository:** ${repoInfo.url}
            **Cloned at:** ${new Date().toISOString()}
            **Workflow Run:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            The repository has been successfully cloned and is ready for analysis. Check the workflow logs for detailed repository information.`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Add success label
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['repo-cloned']
            });

      - name: Handle clone failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Failed to Clone Repository**
              
              There was an error cloning the repository. Common issues:
              - Repository URL is invalid or malformed
              - Repository is private and not accessible
              - Repository doesn't exist
              - Network connectivity issues
              
              Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.
              
              **Expected format:** Include a GitHub repository URL in your issue body, like:
              \`\`\`
              Repository: https://github.com/owner/repository-name
              \`\`\``
            });

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['clone-failed']
            });

      - name: List cloned repository contents (for debugging)
        if: always()
        run: |
          if [ -d "./cloned-repo" ]; then
            echo "üìã Repository structure (top level):"
            ls -la ./cloned-repo/ || echo "Could not list directory contents"
          else
            echo "‚ùå No cloned repository directory found"
          fi

      - name: Copy cloned repository to workspace

        run: |
          echo "üìÅ Setting up workspace for Claude Code analysis..."

          # Remove .git directory to avoid conflicts
          rm -rf ./external-repo/.git

          # Copy all files to current workspace (Claude Code Action works on current repo)
          cp -r ./external-repo/* . 2>/dev/null || echo "No files to copy (hidden files may exist)"
          cp -r ./external-repo/.* . 2>/dev/null || echo "No hidden files to copy"

          # Clean up original clone
          rm -rf ./external-repo

          echo "‚úÖ External repository files copied to workspace"
          echo "üìã Current workspace contents:"
          ls -la

      - name: Run Claude Code Analysis
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          # github_token: ${{ secrets.GITHUB_TOKEN }} // GitHub token for Claude to operate with. Only include this if you're connecting a custom GitHub app of your own!
          trigger_phrase: "@claude"

      - name: Handle analysis failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Repository Analysis Failed**
              
              There was an error analyzing the repository. Common issues:
              - Repository URL is invalid or malformed  
              - Repository is private and not accessible
              - Repository is too large for analysis
              - Missing or invalid ANTHROPIC_API_KEY secret
              - Analysis request format incorrect
              
              **Expected format:**
              \`\`\`
              Repository: https://github.com/owner/repository-name
              
              @claude Please analyze this repository for code quality issues.
              \`\`\`
              
              Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error information.`
            });

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['analysis-failed']
            });

  cleanup:
    runs-on: ubuntu-latest
    needs: setup-and-analyze
    if: always() && github.event_name == 'issues'
    steps:
      - name: Cleanup workspace
        run: |
          echo "üßπ Analysis completed - workspace will be automatically cleaned up"
